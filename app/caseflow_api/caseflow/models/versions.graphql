type Versions {
  creationdate: DateTime
  docid: Int
  id: Int!
  modificationdate: DateTime
  versions: String
  documentid: String
  document: Document
    @materializer(
      query: "getDocument"
      arguments: [
        { name: "id", field: "docid" }
        { name: "id", field: "docid" }
        { name: "id", field: "docid" }
      ]
    )
}

"""
These are some examples of queries generated from the schema. Feel free to modify them or add your own.
"""
type Query {
  getVersionsList: [Versions]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "versions"
      configuration: "postgresql_config"
    )
  getVersions(id: Int!): Versions
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "versions"
      configuration: "postgresql_config"
    )
  getVersionsUsingDocid(id: Int!): [Versions]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT T."creationdate", T."docid", T."documentid", T."id", T."modificationdate", T."versions"
        FROM "public"."versions" T
        WHERE T."docid" = $1
      """
      configuration: "postgresql_config"
    )
  getDocumentVersionByDocumentId(documentid: String!): [Versions]
    @dbquery(
      type: "postgresql"
      query: """
      Select versions,id FROM  "versions"  WHERE "documentid" = $1
      """
      configuration: "postgresql_config"
    )
}

"""
These are some examples of mutations generated from the schema. Feel free to modify them or add your own.
"""
type Mutation {
  insertVersions(
    versions: String!
    creationdate: DateTime!
    docid: Int!
    documentid: String!
    modificationdate: DateTime!
  ): Versions
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "versions"
      dml: INSERT
      configuration: "postgresql_config"
    )
  deleteVersions(id: Int!): Versions
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "versions"
      dml: DELETE
      configuration: "postgresql_config"
    )
}
